@using Microsoft.AspNetCore.Identity;
@model projectWEB.ViewModels.CommentablePageViewModel

@{
    var haveReviews = Model != null && Model.Reviews != null && Model.Reviews.Count > 0;

    var defaultRating = ConfigurationsHelper.DefaultRating;
    var itemRating = haveReviews ? Math.Ceiling(Model.Reviews.Average(x => x.Rating)) : 0;

    var ReviewsTitle = string.Format("{0} {1}", haveReviews ? Model.Reviews.Count : 0, haveReviews && Model.Reviews.Count > 1 ? "PP.ProductDetails.Reviews" : "PP.ProductDetails.Comment");
}

<div class="customer-review-option">
    <div class="row Reviews-container">
        <div class="col-lg-8">
            <h4>@ReviewsTitle</h4>
            <div class="col-container">
                <div class="comment-option">
                    @if (haveReviews)
                    {
                        foreach (var comment in Model.Reviews.Where(x => x.User != null))
                        {
                            var defaultStars = defaultRating - comment.Rating;

                            <div class="co-item">
                                <div class="avatar-pic">
                                    @Html.UserAvatar(comment.User.Picture, alt: comment.User.UserName)
                                </div>
                                <div class="avatar-text">
                                    <h5>@comment.User.FullName <span>@comment.TimeStamp</span></h5>
                                    <div class="at-rating" title="@("PP.ProductDetails.Description".Replace("{commentRating}", comment.Rating.ToString()))">
                                        @for (int i = 1; i <= comment.Rating; i++)
                                        {
                                            <i class="fas fa-star"></i>
                                        }

                                        @for (int i = 1; i <= defaultStars; i++)
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    </div>
                                    <div class="at-reply">@comment.Text</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-secondary error-message" role="alert">
                            @("PP.ProductDetails.NoReviewsOnProduct")
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <h4>@("PP.ProductDetails.LeaveComment")</h4>
            <div class="col-container">
                <div class="leave-comment comment-input-container">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <form id="commentForm" action="#" method="post" class="comment-form">
                            <div class="personal-rating">
                                <span>@("PP.ProductDetails.YourRating")</span>
                                <div class="rating">
                                    @for (int i = 1; i <= defaultRating; i++)
                                    {
                                        <i class="ratingStar fas fa-star" data-value="@i"></i>
                                    }
                                </div>
                                <span id="ratingDisplay">5</span> @("PP.ProductDetails.Star")
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <input type="hidden" name="EntityID" value="@Model.EntityID" />
                                    <input type="hidden" name="RecordID" value="@Model.RecordID" />
                                    <input type="hidden" name="Rating" id="ratingsValue" value="@defaultRating" />

                                    <textarea cols="30" rows="5" name="Text" placeholder="@("PP.ProductDetails.CommentPlaceholder")"></textarea>
                                    <button id="btnComment" type="button" class="site-btn">@("PP.ProductDetails.LeaveYourComment")</button>
                                </div>
                            </div>
                        </form>
                    }
                    else
                    {
                        <div class="alert alert-info error-message" role="alert">
                            @("PP.ProductDetails.LoginToComment")
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<script>
	$("#commentForm").validate({
		errorClass: "alert alert-danger",
		errorElement: "div",
		rules: {
			Text: {
				required: true,
				minlength: 15,
				maxlength: 500
			},
			EntityID: {
				required: true
			},
			RecordID: {
				required: true
			},
		},
		messages: {
			Text: {
				required: "@("PP.ProductDetails.Reviews.Validations.TextRequired")",
				minlength: "@("PP.ProductDetails.Reviews.Validations.TextMinLength".Replace("{min}", "15"))",
				maxlength: "@("PP.ProductDetails.Reviews.Validations.TextMaxLength".Replace("{max}", "500"))"
			},
			EntityID: {
				required: "@("PP.ProductDetails.Reviews.Validations.EntityRequired")"
			},
			RecordID: {
				required: "@("PP.ProductDetails.Reviews.Validations.RecordIDRequired")",
			}
		},
		highlight: function (element, errorClass) {
			$(element).removeClass(errorClass);
		}
	});

	$("#btnComment").click(function () {
		if ($("#commentForm").valid()) {
			$.ajax({
				url: "@Url.LeaveReview()",
				type: "post",
				data: $("#commentForm").serialize()
			})
			.done(function (response) {
				if (response.Success) {
					window.location.reload();
				}
				else {
                    Swal.fire("@("PP.Message.Error")", response.Message, "error");
				}
			})
			.fail(function () {
                 Swal.fire("@("PP.Message.Error")", "@("PP.Message.GenericErrorMessage")", "error");
			});
		}
	});

    $(".ratingStar").click(function () {
		$(".ratingStar").addClass("far").removeClass("fas");

        var $thisStar = $(this);
        $thisStar.addClass("fas").removeClass("far");
		$thisStar.prevAll(".ratingStar").addClass("fas").removeClass("far");
        $("#ratingsValue").val($thisStar.attr("data-value"));
        $("#ratingDisplay").html($thisStar.attr("data-value"));
    });

    $(".btnDeleteComment").click(function () {
        var commentRow = $(this).parents(".commentRow");

        swal.fire({
			title: "@("PP.ProductDetails.CommentDeleteWarning")",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '@("PP.ProductDetails.CommentDeleteConfirm")',
            cancelButtonText: '@("PP.ProductDetails.CommentDeleteCancel")'
		})
		.then((result) => {
			if (result.value) {
				$("#dtLoader").show();
				$("#response-holder").hide();

				$.ajax({
					url: "@Url.DeleteAction("Reviews")",
                       method: "post",
                       data: { id : $(this).attr("data-id") }
				})
                .done(function (response) {
                    if (response != null && response.Success != undefined && response.Success) {
                        commentRow.next("hr").remove();
                        commentRow.remove();
				    }
				    else {
                        Swal.fire("@("PP.Message.Error")", response.Message, "error");
				    }
				});
			}
		});
     });
</script>
